generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  lastLogin      DateTime?
  accessTokens   AccessToken[]
  projectMembers ProjectMember[]
  timeLogs       TimeLog[]
  profile        Profile?
  billing        Billing?
}

model Profile {
  id        String   @id @default(uuid())
  name      String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model AccessToken {
  id        String    @id @default(uuid())
  token     String    @unique
  hash      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@index([token])
}

model Project {
  id        String          @id @default(uuid())
  name      String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  members   ProjectMember[]
  timeLogs  TimeLog[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      String   @default("MEMBER")
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
  @@map("Member")
}

model TimeLog {
  id          String   @id @default(uuid())
  title       String
  description String?
  duration    Int // duration in milliseconds
  date        DateTime
  projectId   String?
  userId      String
  project     Project? @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Billing {
  id         String   @id @default(uuid())
  customerId String
  planId     String?
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)
  user       User     @relation(fields: [userId], references: [id])
}
